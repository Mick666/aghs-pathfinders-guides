[{"/home/michael/React/aghs-pathfinders-guides/src/index.js":"1","/home/michael/React/aghs-pathfinders-guides/src/App.js":"2","/home/michael/React/aghs-pathfinders-guides/src/reportWebVitals.js":"3","/home/michael/React/aghs-pathfinders-guides/src/components/Main.js":"4","/home/michael/React/aghs-pathfinders-guides/src/components/HeroPage.js":"5","/home/michael/React/aghs-pathfinders-guides/src/Heroes.js":"6","/home/michael/React/aghs-pathfinders-guides/src/components/HeroList.js":"7","/home/michael/React/aghs-pathfinders-guides/src/components/GuideList.js":"8","/home/michael/React/aghs-pathfinders-guides/src/Guides.js":"9","/home/michael/React/aghs-pathfinders-guides/src/components/Guide.js":"10","/home/michael/React/aghs-pathfinders-guides/src/components/Header.js":"11","/home/michael/React/aghs-pathfinders-guides/src/Items.js":"12","/home/michael/React/aghs-pathfinders-guides/src/Abilities.js":"13","/home/michael/React/aghs-pathfinders-guides/src/Shards.js":"14","/home/michael/React/aghs-pathfinders-guides/src/components/AllGuidesPage.js":"15"},{"size":503,"mtime":1610661730673,"results":"16","hashOfConfig":"17"},{"size":1456,"mtime":1610954460258,"results":"18","hashOfConfig":"17"},{"size":396,"mtime":1610661749365,"results":"19","hashOfConfig":"17"},{"size":4916,"mtime":1610954110286,"results":"20","hashOfConfig":"17"},{"size":1219,"mtime":1611053600081,"results":"21","hashOfConfig":"17"},{"size":20177,"mtime":1611053686469,"results":"22","hashOfConfig":"17"},{"size":806,"mtime":1610952694702,"results":"23","hashOfConfig":"17"},{"size":1145,"mtime":1610990105190,"results":"24","hashOfConfig":"17"},{"size":4766,"mtime":1611064370593,"results":"25","hashOfConfig":"17"},{"size":7287,"mtime":1611063965589,"results":"26","hashOfConfig":"17"},{"size":678,"mtime":1610954689782,"results":"27","hashOfConfig":"17"},{"size":13354,"mtime":1610673625113,"results":"28","hashOfConfig":"17"},{"size":13960,"mtime":1611063842397,"results":"29","hashOfConfig":"17"},{"size":765,"mtime":1610941865267,"results":"30","hashOfConfig":"17"},{"size":808,"mtime":1610954674350,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ka3wz9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/michael/React/aghs-pathfinders-guides/src/index.js",[],[],"/home/michael/React/aghs-pathfinders-guides/src/App.js",[],"/home/michael/React/aghs-pathfinders-guides/src/reportWebVitals.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/Main.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/HeroPage.js",[],"/home/michael/React/aghs-pathfinders-guides/src/Heroes.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/HeroList.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/GuideList.js",[],"/home/michael/React/aghs-pathfinders-guides/src/Guides.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/Guide.js",["64"],"import React, { useState } from 'react'\nimport Items from '../Items'\nimport Abilities from '../Abilities'\nimport Heroes from '../Heroes'\nimport Shards from '../Shards'\n\nconst GuideLevels = ({ levels, selectedTalents, hero }) => {\n    //eslint-disable-next-line\n    const levelGrid = new Array(5).fill(null).map(_ => new Array(18).fill('blank'))\n    return (\n        <div>\n\n            <div className='levelGridParent'>\n                <h2 className='levelGridTitle'>Levels</h2>\n                {levelGrid.map((skill, skillKey) => {\n                    return (\n                        <div key={skillKey} className='skillRowParent'>\n                            <div>\n                                <img className='abilityImage' src={Abilities[hero.abilities[skillKey]].link} />\n                                <h4 className='abilityTitle'>{Abilities[hero.abilities[skillKey]].name}</h4>\n                            </div>\n                            <div className='skillRow'>\n                                {skill.map((level, levelKey) => {\n                                    return (\n                                        <div key={levelKey} className='levelCell'>\n                                            {levels[levelKey] === skillKey ?\n                                                <div className='selectedAbility'>{levelKey + 1}</div> :\n                                                null\n                                            }\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n            <div className='talentParent'>\n                <table className='talentTree'>\n                    <tbody>\n                        <th colSpan={3} className='talentHeader'>Talent Tree</th>\n                        {hero.talents.map((talentRow, key) => {\n                            return (\n                                <tr key={key}>\n                                    <td className={`talentCell ${selectedTalents[key] === talentRow[0] ? 'talentSelected' : ''}`}>\n                                        {talentRow[0]}\n                                    </td>\n                                    <th className={`talentLevel talentLevel${key}`}>\n                                        {talentRow[1]}\n                                    </th>\n                                    <td className={`talentCell ${selectedTalents[key] === talentRow[2] ? 'talentSelected' : ''}`}>\n                                        {talentRow[2]}\n                                    </td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nconst ShardRankings = ({ shards }) => {\n    return (\n        <div className='shardRankings'>\n            {shards.map((shard, key) => {\n                return (\n                    <div key={key} className='shardRankingParent'>\n                        <img src={Abilities[Shards[shard].skill].link} className='shardImage' />\n                        <div>\n                            <h3 className='shardTitle' >{Shards[shard].name}</h3>\n                            <div className='shardDescription' >{Shards[shard].description}</div>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nconst ShardCombos = ({ shardCombos }) => {\n    const backupLink = 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/4c/Blade_Fury_icon.png'\n    // Just while we're waiting for the full list of shards from the developer\n    if (!shardCombos) return (\n        <div className='shardCombinationParent'>\n            No shard combinations listed so far: Why not suggest one?\n        </div>\n    )\n    return (\n        <div className='shardComboParent'>\n            {shardCombos.map((combos, key) => {\n                return (\n                    <div key={key} className='shardCombo'>\n                        <div className='shardComboDescription'>{combos.description}</div>\n                        <div className='shardComboCell'>\n                            {combos.combination.map((shard, key) => {\n                                return (\n                                    <div key={key} className='shardComboShard'>\n                                        <img src={Abilities[Shards[shard].skill].link} className='shardComboImage' />\n                                        <h3 className='shardComboTitle shardTitle' >{Shards[shard].name}</h3>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nconst GuideSegment = ({ section }) => {\n    return (\n        <div className='guideSection'>\n            <div className='guideSectionTitle'>{section.groupName}</div>\n            <div className='guideItems'>\n                {section.items.map((x, key) => {\n                    return (<div key={key} className='itemCell'>\n                        <img\n                            src={Items[x].link}\n                            className='itemIcon'\n                        />\n                        <div className='itemText'>{Items[x].name}</div>\n                    </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nconst Guide = ({ guide }) => {\n    if (!guide) {\n        return <div className='displayedGuide'></div>\n    }\n\n    const [currentTab, setTab] = useState('Items')\n    const tabs = ['Items', 'Levelling', 'Legendary Shards Ranking', 'Shard combinations']\n    const hero = Heroes.filter(x => x.id === guide.hero)[0]\n\n\n    return (\n        <div className='displayedGuide'>\n            <div className='guideTitle'>{guide.title}</div>\n            <div className='guideTabs'>\n                {tabs.map((tab, key) => {\n                    return (\n                        <div\n                            key={key}\n                            className={`guideTabLink ${currentTab === tab ? 'activeTab' : ''}`}\n                            onClick={() => setTab(tab)}\n                        >\n                            {tab}\n                        </div>\n                    )\n                })}\n            </div>\n            <div className='guideItems' style={{ display: currentTab === 'Items' ? '' : 'none' }}>\n                {guide.itemGroups.map((group, key) => <GuideSegment key={key} section={group} />)}\n            </div>\n            <div style={{ display: currentTab === 'Levelling' ? '' : 'none' }}>\n                <GuideLevels levels={guide.levels} selectedTalents={guide.selectedTalents} hero={hero} />\n            </div>\n            <div style={{ display: currentTab === 'Legendary Shards Ranking' ? '' : 'none' }}>\n                <ShardRankings shards={guide.shards} />\n            </div>\n            <div style={{ display: currentTab === 'Shard combinations' ? '' : 'none' }}>\n                <ShardCombos shardCombos={guide.shardCombinations} />\n            </div>\n        </div>\n    )\n}\n\nexport default Guide","/home/michael/React/aghs-pathfinders-guides/src/components/Header.js",[],"/home/michael/React/aghs-pathfinders-guides/src/Items.js",[],"/home/michael/React/aghs-pathfinders-guides/src/Abilities.js",[],"/home/michael/React/aghs-pathfinders-guides/src/Shards.js",[],"/home/michael/React/aghs-pathfinders-guides/src/components/AllGuidesPage.js",[],{"ruleId":"65","severity":1,"message":"66","line":83,"column":11,"nodeType":"67","messageId":"68","endLine":83,"endColumn":21},"no-unused-vars","'backupLink' is assigned a value but never used.","Identifier","unusedVar"]